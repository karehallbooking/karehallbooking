rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is main admin (karehallbooking@gmail.com)
    function isMainAdmin() {
      return isAuthenticated() && 
             request.auth.token.email == 'karehallbooking@gmail.com';
    }
    
    // Helper function to check if user is updating their own document
    function isOwnDocument() {
      return isAuthenticated() && 
             request.auth.uid == resource.id;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow read access to all authenticated users
      allow read: if isAuthenticated();
      
      // Allow create: only for new user registration
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      request.resource.data.role == 'user';
      
      // Allow update: users can update their own profile (except role)
      // Admins can update any user's role
      // Main admin can demote admins
      allow update: if isAuthenticated() && (
        // User updating their own profile (except role)
        (isOwnDocument() && 
         request.resource.data.role == resource.data.role) ||
        
        // Admin promoting any user to admin
        (isAdmin() && 
         request.resource.data.role == 'admin' && 
         resource.data.role == 'user') ||
        
        // Main admin demoting any admin to user
        (isMainAdmin() && 
         request.resource.data.role == 'user' && 
         resource.data.role == 'admin')
      );
      
      // Allow delete: only main admin can delete users
      allow delete: if isMainAdmin();
    }
    
    // Bookings collection rules
    match /bookings/{bookingId} {
      // Allow read: users can read their own bookings, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      
      // Allow create: authenticated users can create bookings
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Allow update: users can update their own bookings, admins can update any
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      
      // Allow delete: users can delete their own bookings, admins can delete any
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }
    
    // Halls collection rules
    match /halls/{hallId} {
      // Allow read: all authenticated users
      allow read: if isAuthenticated();
      
      // Allow create, update, delete: only admins
      allow create, update, delete: if isAdmin();
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      // Allow read: users can read their own notifications, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      
      // Allow create: admins can create notifications for any user
      allow create: if isAdmin();
      
      // Allow update: users can mark their own notifications as read, admins can update any
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      
      // Allow delete: admins can delete any notification
      allow delete: if isAdmin();
    }
  }
}
